plugins {
    id 'com.android.application'
    id 'jacoco'
}

jacoco {
    toolVersion = "$jacocoVersion"
}

tasks.withType(Test) {
    jacoco {
        includeNoLocationClasses = true
        excludes = ['jdk.internal.*']
    }
}

task jacocoTestReport(type: JacocoReport) {

    group = "Reporting"
    description = "Generate JaCoCo coverage report."

    reports {
        xml.enabled true
        html.enabled true
    }

    def coverageDir = project.hasProperty('coverageDir') ? project.getProperty('coverageDir') : 'default'

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))

    def debugUnitTestExecFile = file("$project.buildDir/outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec")

    if(coverageDir == 'default') {
        def localExecFiles = fileTree(dir:"$project.buildDir/outputs/code-coverage/connected/*coverage.ec")
        executionData.from(debugUnitTestExecFile, localExecFiles)
    } else {
        def externalExecFiles = fileTree(dir: coverageDir,
                includes: ['/**/coverage/*.ec'])
        executionData.from(debugUnitTestExecFile, externalExecFiles)
    }
}

//task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
//    group = "Verification" // existing group containing tasks for generating linting reports etc.
//    description = "Generate Jacoco coverage reports for the debug build."
//    reports {
//        xml.enabled true
//    }
//    executionData.from = "${project.buildDir}/outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec"
//    classDirectories.from = "$project.buildDir/intermediates/javac/debug"
//    sourceDirectories.from = "${project.projectDir}/src/main/java"
//}

//task jacocoTestReport(type: JacocoReport) {
//    reports {
//        xml.enabled true
//    }
//}

android {
    compileSdkVersion 30
    defaultConfig {
        applicationId "app.identifier"
        minSdkVersion 26
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {

        debug {
            testCoverageEnabled = true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    // JUnit 4.12 for test suite
    testImplementation 'junit:junit:4.13'
    //Dependencies for Android Test/
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test:rules:1.3.0-beta01'
}